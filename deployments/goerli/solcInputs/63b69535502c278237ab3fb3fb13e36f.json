{
  "language": "Solidity",
  "sources": {
    "contracts/solMate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// import \"hardhat/console.sol\";\n\nerror MinimumBalanceRequired();\nerror WithdrawFailed();\nerror TopUpFailed();\nerror FundingFailed();\nerror NotAuthorized();\n\ncontract SolMate {\n    enum TaskState {\n        active,\n        cancelled\n    }\n\n    string name;\n\n    // EVENTS\n\n    event NewAutoTask(\n        uint256 id,\n        address taskAddress,\n        uint256 funds,\n        uint256 gasLimit,\n        TaskState state,\n        address creator,\n        uint256 totalCostForExec\n    );\n\n    event AutoTaskCancelled(address taskAddress,uint amount, address owner);\n    event TaskFundingSuccess(uint256 amount, address taskAddress);\n    event TaskFundWithdrawSuccess(address taskAddress, uint256 fund);\n    event GasLimitUpdated(uint256 gasLimit, address taskAddress, address user);\n    event TaskDetailsUpdated(uint256 time, address taskAddress, uint256 amount);\n\n    // MODIFIERS\n\n    modifier onlyOwner() {\n        require(msg.sender == i_owner, \"user is not owner\");\n        _;\n    }\n\n    modifier onlyAuthorized(){\n        require(s_isAuthorized[msg.sender] == true,\"not authorized\");\n        _;\n    }\n\n    // STRUCTS\n\n\n    struct AutoTask {\n        uint256 id;\n        address taskAddress;\n        uint256 funds;\n        uint256 gasLimit;\n        TaskState state;\n        address creator;\n        uint256 totalCostForExec;\n    }\n\n\n    struct Executions {\n        uint executedAt;\n        string Hash;\n        uint amount;\n    }\n\n    // STATE VARIABLES\n\n    AutoTask[] private s_tasks;\n    mapping(address => AutoTask[]) private s_tasksOf;\n    address payable immutable i_owner;\n    mapping(address => Executions[]) private s_execListOf;\n    mapping(address => bool) private s_isAuthorized;\n\n    // FUNCTIONS\n\n    constructor() {\n        i_owner = payable(msg.sender);\n    }\n\n    function createAutomation(\n        address _address,\n        uint256 _gasLimit,\n        address executor\n    ) public payable {\n        if (msg.value < 0.0005 ether) {\n            revert MinimumBalanceRequired();\n        }\n        s_tasks.push(\n            AutoTask(\n                s_tasks.length + 1,\n                _address,\n                msg.value,\n                _gasLimit,\n                TaskState.active,\n                msg.sender,\n                0\n            )\n        );\n        s_isAuthorized[executor] = true;\n        (bool success, ) = payable(executor).call{value: msg.value}(\"\");\n        if (!success) {\n            revert TopUpFailed();\n        }\n        emit NewAutoTask(\n            s_tasks.length + 1,\n            _address,\n            msg.value,\n            _gasLimit,\n            TaskState.active,\n            msg.sender,\n            0\n        );\n    }\n\n    function cancelAutomation(address _taskAddress) public {\n        uint fund;\n        for (uint256 i = 0; i < s_tasks.length; i++) {\n            if (s_tasks[i].taskAddress == _taskAddress) {\n            if(msg.sender != s_tasks[i].creator){\n                revert NotAuthorized(); \n            }\n                s_tasks[i].state = TaskState.cancelled;\n                fund = s_tasks[i].funds;\n            }\n        }\n        emit AutoTaskCancelled(_taskAddress,fund, msg.sender);\n    }\n\n    function addFunds(address _taskAddress, address executor) public payable {\n        if (msg.value < 0.0001 ether) {\n            revert MinimumBalanceRequired();\n        }\n        for (uint256 i = 0; i < s_tasks.length; i++) {\n            if (s_tasks[i].taskAddress == _taskAddress) {\n                s_tasks[i].funds += msg.value;\n            }\n        }\n        (bool success, ) = payable(executor).call{value: msg.value}(\"\");\n        if (!success) {\n            revert FundingFailed();\n        }\n        emit TaskFundingSuccess(msg.value, _taskAddress);\n    }\n\n    function withdrawFunds(address _taskAddress) public payable {\n        uint256 fund;\n        for (uint256 i = 0; i < s_tasks.length; i++) {\n            if (s_tasks[i].taskAddress == _taskAddress) {\n                            if(msg.sender != s_tasks[i].creator){\n                revert NotAuthorized(); \n            }\n                fund = s_tasks[i].funds;\n                s_tasks[i].funds = 0;\n            }\n            (bool success,) = payable(msg.sender).call{value:fund}(\"\");\n            if(!success){\n                revert WithdrawFailed(); \n            }\n        }\n        emit TaskFundWithdrawSuccess(_taskAddress, fund);\n    }\n\n    function updateTaskExecDetails(address _taskAddress, uint256 amount,string memory txHash)\n        public\n        payable\n        onlyAuthorized\n    {\n        for (uint256 i = 0; i < s_tasks.length; i++) {\n            if (s_tasks[i].taskAddress == _taskAddress) {\n                s_execListOf[_taskAddress].push(Executions(block.timestamp,txHash,amount));\n                s_tasks[i].totalCostForExec += amount;\n                s_tasks[i].funds -= amount;\n                emit TaskDetailsUpdated(block.timestamp, _taskAddress, amount);\n            }\n        }\n    }\n\n    function depositeFunds() public payable onlyAuthorized {\n        if(msg.value < 0.00001 ether){\n            revert MinimumBalanceRequired();\n        }\n    }\n\n    function updateTaskGasLimit(address _taskAddress, uint256 _gasLimit)\n        public\n        payable\n    {\n        for (uint256 i = 0; i < s_tasks.length; i++) {\n            if (s_tasks[i].taskAddress == _taskAddress) {\n                s_tasks[i].gasLimit = _gasLimit;\n                emit GasLimitUpdated(_gasLimit, _taskAddress, msg.sender);\n            }\n        }\n    }\n\n    function withdrawContractFunds(uint amount) public payable onlyOwner {\n        (bool success,) = i_owner.call{value:amount}(\"\");\n        if(!success){\n            revert WithdrawFailed(); \n        } \n    }\n\n    //    VIEW FUNCTIONS\n\n    function getAllTasks() public view returns (AutoTask[] memory) {\n        return s_tasks;\n    }\n\n    function getTask(address _taskAddress) public view returns(AutoTask memory){\n        AutoTask memory task;\n        for (uint i = 0; i < s_tasks.length; i++) {\n            if(s_tasks[i].taskAddress == _taskAddress){\n                task = s_tasks[i];\n            }\n        }\n        return task;\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getExecListOf(address _taskAddress)\n        public\n        view\n        returns (Executions[] memory)\n    {\n        return s_execListOf[_taskAddress];\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}